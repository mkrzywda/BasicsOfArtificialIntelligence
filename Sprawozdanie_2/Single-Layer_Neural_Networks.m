
close all; clear all; clc;
% Wartoœci które przyjmuje wêze³ na wejœciu
input_value = [0 1; 0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;
0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1]; 

%iloœæ wyjœæ z sieci
output_value = 1;

%metoda 1 - tworzenie perceptronu
%net = newp(input_value, output_value);

%metoda 2 - tworzenie sieci jednowarstwowej
net = newlin(input_value, output_value);

 % Reprezentacja kolumnowa liter
input_learn = [0 0 1 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1;
 1 1 1 0 1 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0;
 1 1 1 0 1 0 1 0 1 1 1 1 0 0 0 0 0 0 0 0;
 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 0 0 0;
 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0;
 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1;
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0;
 1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0;
 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0;
 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1;
 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 0 1 0 0 0;
 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0;
 0 1 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0;
 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0;
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0;
 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0;
 1 1 1 1 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0;
 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0;
 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1;
 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1;
 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1;
 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1 0;
 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0];
 
% 1 - du¿a litera, 0 - ma³a litera
output_learn = [1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0];

net.name = 'Wielkosc liter';
net.trainParam.epochs = 30000;

%b³¹d œredniokwadratowy
net.trainParam.goal = 0.001;
net.trainParam.mu = 0.01; 

%W drugiej metodzie okreœliliœmy wspo³czynnik uczenia, wiêc jest nam to zbêdne,
%net.trainParam.showWindow = false;


%uczenie sieci
net = train(net, input_learn, output_learn);

%litery do testu
test_A = [0;1;1;1;0;
 1;0;0;0;1;
 1;0;0;0;1;
 1;1;1;1;1;
 1;0;0;0;1];
 
test_a = [0;1;1;0;0;
 0;0;0;1;0;
 0;1;1;1;0;
 1;0;0;1;0;
 0;1;1;1;1];
 
test_B = [1;1;1;0;0;
 1;0;0;1;0;
 1;1;1;0;0;
 1;0;0;1;0;
 1;1;1;0;0];
 
test_b = [1;0;0;0;0;
 1;0;0;0;0;
 1;1;1;0;0;
 1;0;0;1;0;
 1;1;1;0;0];
 
test_C = [1;1;1;1;0;
 1;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0;
 1;1;1;1;0];
 
test_c = [0;0;0;0;0;
 0;0;0;0;0;
 0;1;1;0;0;
 1;0;0;0;0;
 0;1;1;0;0];
 
test_D = [1;1;1;0;0;
 1;0;0;1;0;
 1;0;0;1;0;
 1;0;0;1;0;
 1;1;1;0;0];
 
test_d = [0;0;0;1;0;
 0;0;0;1;0;
 0;1;1;1;0;
 1;0;0;1;0;
 0;1;1;1;0];
 
test_E = [1;1;1;1;0;
 1;0;0;0;0;
 1;1;1;0;0;
 1;0;0;0;0;
 1;1;1;1;0];
 
test_e = [0;1;1;0;0;
 1;0;0;1;0;
 1;1;1;0;0;
 1;0;0;0;0;
 0;1;1;0;0];
 
test_F = [1;1;1;1;0;
 1;0;0;0;0;
 1;1;1;0;0;
 1;0;0;0;0;
 1;0;0;0;0];
 
test_f = [0;1;1;0;0;
 1;0;0;0;0;
 1;1;1;0;0;
 1;0;0;0;0;
 1;0;0;0;0];
 
test_H = [1;0;0;0;1;
 1;0;0;0;1;
 1;1;1;1;1;
 1;0;0;0;1;
 1;0;0;0;1];
 
test_h = [1;0;0;0;0;
 1;0;0;0;0;
 1;1;1;1;0;
 1;0;0;1;0;
 1;0;0;1;0];
 
test_I = [1;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0];
 
test_i = [1;0;0;0;0;
 0;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0];
 
test_K = [1;0;0;1;0;
 1;0;1;0;0;
 1;1;0;0;0;
 1;0;1;0;0;
 1;0;0;1;0];
 
test_k = [1;0;0;0;0;
 1;0;0;0;0;
 1;0;1;0;0;
 1;1;0;0;0;
 1;0;1;0;0];
 
test_L = [1;0;0;0;0;
 1;0;0;0;0; 
 1;0;0;0;0;
 1;0;0;0;0;
 1;1;1;1;0];
 
test_l = [1;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0;
 1;0;0;0;0;
 1;1;1;0;0];


%test sieci
efekt1 = sim(net, test_A);
efekt2 = sim(net, test_a);

[efekt1 efekt2]
if round(efekt1) <= 0
 disp('Ma³a litera');
else
 disp('Wielka litera');
end
if round(efekt2) <= 0
 disp('Ma³a litera');
else
 disp('Wielka litera');
end 
